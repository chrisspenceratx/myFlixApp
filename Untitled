
me down:
mongoose.connect('mongodb://localhost:27017/myFlixDB', { useNewUrlParser: true, useUnifiedTopology: true });
// mongoose.connect(process.env.CONNECTION_URI, { useNewUrlParser: true, useUnifiedTopology: true });
// process.env.CONNECTION_URI,


app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});

//original way of connecting//
app.listen(8080, () => {
  console.log('Your app is listening on port 8080.');
});

---
Me still:

app.put('/users/:Username', (req, res) => {

      Users.findOneAndUpdate(
          { Username: req.params.Username },
          {
              $set: {
                  Username: req.body.Username,
                  Password: hashedPassword,
                  Email: req.body.Email,
                  Birthday: req.body.Birthday,

              }
          },
          { new: true }, // This line makes sure that the updated document is returned
          (err, updatedUser) => {
              if (err) {
                  console.error(err);
                  res.status(500).send('Error: ' + err);
              } else {
                  res.json(updatedUser);
              }
          }
      );
  }
);


-----



{
    "Favorites": [],
    "_id": "63d2634935d3d2a4fd135305",
    "Username": "chrisspenceradmin",
    "Password": "$2b$10$Yznwc0PRT7JobOwPkUGISOkZ9qdNdHacG46C6J4J6rPImjmLFfIje",
    "Email": "chrisspencer81@gmail.com",
    "FavoriteMovies": [6324612a13df19452592fef5],
    "__v": 0




-------------
(ME)
app.put('/users/:Username', (req, res) => {

  Users.findOneAndUpdate(
      { Username: req.params.Username },
      {
          $set: {
              Username: req.body.Username,
              Password: hashedPassword,
              Email: req.body.Email,
              Birthday: req.body.Birthday,

          }
      },
      { new: true }, // This line makes sure that the updated document is returned
      (err, updatedUser) => {
          if (err) {
              console.error(err);
              res.status(500).send('Error: ' + err);
          } else {
              res.json(updatedUser);
          }
      }
  );
}

TOP (line10 for him )
const {check, validationResult } = require('express-validator');
);


let errors = validationResult(req);

   if (!errors.isEmpty()) {
   return res.status(422).json({ errors: errors.array() });
   }

   let hashedPassword = Users.hashPassword(req.body.Password);
